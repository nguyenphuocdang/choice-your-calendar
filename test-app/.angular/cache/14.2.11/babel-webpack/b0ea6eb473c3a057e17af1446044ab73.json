{"ast":null,"code":"import { BYTE } from './byte.js';\n/**\n * Frame class represents a STOMP frame.\n *\n * @internal\n */\n\nexport class FrameImpl {\n  /**\n   * Frame constructor. `command`, `headers` and `body` are available as properties.\n   *\n   * @internal\n   */\n  constructor(params) {\n    const {\n      command,\n      headers,\n      body,\n      binaryBody,\n      escapeHeaderValues,\n      skipContentLengthHeader\n    } = params;\n    this.command = command;\n    this.headers = Object.assign({}, headers || {});\n\n    if (binaryBody) {\n      this._binaryBody = binaryBody;\n      this.isBinaryBody = true;\n    } else {\n      this._body = body || '';\n      this.isBinaryBody = false;\n    }\n\n    this.escapeHeaderValues = escapeHeaderValues || false;\n    this.skipContentLengthHeader = skipContentLengthHeader || false;\n  }\n  /**\n   * body of the frame\n   */\n\n\n  get body() {\n    if (!this._body && this.isBinaryBody) {\n      this._body = new TextDecoder().decode(this._binaryBody);\n    }\n\n    return this._body || '';\n  }\n  /**\n   * body as Uint8Array\n   */\n\n\n  get binaryBody() {\n    if (!this._binaryBody && !this.isBinaryBody) {\n      this._binaryBody = new TextEncoder().encode(this._body);\n    } // At this stage it will definitely have a valid value\n\n\n    return this._binaryBody;\n  }\n  /**\n   * deserialize a STOMP Frame from raw data.\n   *\n   * @internal\n   */\n\n\n  static fromRawFrame(rawFrame, escapeHeaderValues) {\n    const headers = {};\n\n    const trim = str => str.replace(/^\\s+|\\s+$/g, ''); // In case of repeated headers, as per standards, first value need to be used\n\n\n    for (const header of rawFrame.headers.reverse()) {\n      const idx = header.indexOf(':');\n      const key = trim(header[0]);\n      let value = trim(header[1]);\n\n      if (escapeHeaderValues && rawFrame.command !== 'CONNECT' && rawFrame.command !== 'CONNECTED') {\n        value = FrameImpl.hdrValueUnEscape(value);\n      }\n\n      headers[key] = value;\n    }\n\n    return new FrameImpl({\n      command: rawFrame.command,\n      headers,\n      binaryBody: rawFrame.binaryBody,\n      escapeHeaderValues\n    });\n  }\n  /**\n   * @internal\n   */\n\n\n  toString() {\n    return this.serializeCmdAndHeaders();\n  }\n  /**\n   * serialize this Frame in a format suitable to be passed to WebSocket.\n   * If the body is string the output will be string.\n   * If the body is binary (i.e. of type Unit8Array) it will be serialized to ArrayBuffer.\n   *\n   * @internal\n   */\n\n\n  serialize() {\n    const cmdAndHeaders = this.serializeCmdAndHeaders();\n\n    if (this.isBinaryBody) {\n      return FrameImpl.toUnit8Array(cmdAndHeaders, this._binaryBody).buffer;\n    } else {\n      return cmdAndHeaders + this._body + BYTE.NULL;\n    }\n  }\n\n  serializeCmdAndHeaders() {\n    const lines = [this.command];\n\n    if (this.skipContentLengthHeader) {\n      delete this.headers['content-length'];\n    }\n\n    for (const name of Object.keys(this.headers || {})) {\n      const value = this.headers[name];\n\n      if (this.escapeHeaderValues && this.command !== 'CONNECT' && this.command !== 'CONNECTED') {\n        lines.push(`${name}:${FrameImpl.hdrValueEscape(`${value}`)}`);\n      } else {\n        lines.push(`${name}:${value}`);\n      }\n    }\n\n    if (this.isBinaryBody || !this.isBodyEmpty() && !this.skipContentLengthHeader) {\n      lines.push(`content-length:${this.bodyLength()}`);\n    }\n\n    return lines.join(BYTE.LF) + BYTE.LF + BYTE.LF;\n  }\n\n  isBodyEmpty() {\n    return this.bodyLength() === 0;\n  }\n\n  bodyLength() {\n    const binaryBody = this.binaryBody;\n    return binaryBody ? binaryBody.length : 0;\n  }\n  /**\n   * Compute the size of a UTF-8 string by counting its number of bytes\n   * (and not the number of characters composing the string)\n   */\n\n\n  static sizeOfUTF8(s) {\n    return s ? new TextEncoder().encode(s).length : 0;\n  }\n\n  static toUnit8Array(cmdAndHeaders, binaryBody) {\n    const uint8CmdAndHeaders = new TextEncoder().encode(cmdAndHeaders);\n    const nullTerminator = new Uint8Array([0]);\n    const uint8Frame = new Uint8Array(uint8CmdAndHeaders.length + binaryBody.length + nullTerminator.length);\n    uint8Frame.set(uint8CmdAndHeaders);\n    uint8Frame.set(binaryBody, uint8CmdAndHeaders.length);\n    uint8Frame.set(nullTerminator, uint8CmdAndHeaders.length + binaryBody.length);\n    return uint8Frame;\n  }\n  /**\n   * Serialize a STOMP frame as per STOMP standards, suitable to be sent to the STOMP broker.\n   *\n   * @internal\n   */\n\n\n  static marshall(params) {\n    const frame = new FrameImpl(params);\n    return frame.serialize();\n  }\n  /**\n   *  Escape header values\n   */\n\n\n  static hdrValueEscape(str) {\n    return str.replace(/\\\\/g, '\\\\\\\\').replace(/\\r/g, '\\\\r').replace(/\\n/g, '\\\\n').replace(/:/g, '\\\\c');\n  }\n  /**\n   * UnEscape header values\n   */\n\n\n  static hdrValueUnEscape(str) {\n    return str.replace(/\\\\r/g, '\\r').replace(/\\\\n/g, '\\n').replace(/\\\\c/g, ':').replace(/\\\\\\\\/g, '\\\\');\n  }\n\n}","map":{"version":3,"names":["BYTE","FrameImpl","constructor","params","command","headers","body","binaryBody","escapeHeaderValues","skipContentLengthHeader","Object","assign","_binaryBody","isBinaryBody","_body","TextDecoder","decode","TextEncoder","encode","fromRawFrame","rawFrame","trim","str","replace","header","reverse","idx","indexOf","key","value","hdrValueUnEscape","toString","serializeCmdAndHeaders","serialize","cmdAndHeaders","toUnit8Array","buffer","NULL","lines","name","keys","push","hdrValueEscape","isBodyEmpty","bodyLength","join","LF","length","sizeOfUTF8","s","uint8CmdAndHeaders","nullTerminator","Uint8Array","uint8Frame","set","marshall","frame"],"sources":["C:/Users/Admins/Desktop/New folder/test-app/node_modules/@stomp/stompjs/esm6/frame-impl.js"],"sourcesContent":["import { BYTE } from './byte.js';\n/**\n * Frame class represents a STOMP frame.\n *\n * @internal\n */\nexport class FrameImpl {\n    /**\n     * Frame constructor. `command`, `headers` and `body` are available as properties.\n     *\n     * @internal\n     */\n    constructor(params) {\n        const { command, headers, body, binaryBody, escapeHeaderValues, skipContentLengthHeader, } = params;\n        this.command = command;\n        this.headers = Object.assign({}, headers || {});\n        if (binaryBody) {\n            this._binaryBody = binaryBody;\n            this.isBinaryBody = true;\n        }\n        else {\n            this._body = body || '';\n            this.isBinaryBody = false;\n        }\n        this.escapeHeaderValues = escapeHeaderValues || false;\n        this.skipContentLengthHeader = skipContentLengthHeader || false;\n    }\n    /**\n     * body of the frame\n     */\n    get body() {\n        if (!this._body && this.isBinaryBody) {\n            this._body = new TextDecoder().decode(this._binaryBody);\n        }\n        return this._body || '';\n    }\n    /**\n     * body as Uint8Array\n     */\n    get binaryBody() {\n        if (!this._binaryBody && !this.isBinaryBody) {\n            this._binaryBody = new TextEncoder().encode(this._body);\n        }\n        // At this stage it will definitely have a valid value\n        return this._binaryBody;\n    }\n    /**\n     * deserialize a STOMP Frame from raw data.\n     *\n     * @internal\n     */\n    static fromRawFrame(rawFrame, escapeHeaderValues) {\n        const headers = {};\n        const trim = (str) => str.replace(/^\\s+|\\s+$/g, '');\n        // In case of repeated headers, as per standards, first value need to be used\n        for (const header of rawFrame.headers.reverse()) {\n            const idx = header.indexOf(':');\n            const key = trim(header[0]);\n            let value = trim(header[1]);\n            if (escapeHeaderValues &&\n                rawFrame.command !== 'CONNECT' &&\n                rawFrame.command !== 'CONNECTED') {\n                value = FrameImpl.hdrValueUnEscape(value);\n            }\n            headers[key] = value;\n        }\n        return new FrameImpl({\n            command: rawFrame.command,\n            headers,\n            binaryBody: rawFrame.binaryBody,\n            escapeHeaderValues,\n        });\n    }\n    /**\n     * @internal\n     */\n    toString() {\n        return this.serializeCmdAndHeaders();\n    }\n    /**\n     * serialize this Frame in a format suitable to be passed to WebSocket.\n     * If the body is string the output will be string.\n     * If the body is binary (i.e. of type Unit8Array) it will be serialized to ArrayBuffer.\n     *\n     * @internal\n     */\n    serialize() {\n        const cmdAndHeaders = this.serializeCmdAndHeaders();\n        if (this.isBinaryBody) {\n            return FrameImpl.toUnit8Array(cmdAndHeaders, this._binaryBody).buffer;\n        }\n        else {\n            return cmdAndHeaders + this._body + BYTE.NULL;\n        }\n    }\n    serializeCmdAndHeaders() {\n        const lines = [this.command];\n        if (this.skipContentLengthHeader) {\n            delete this.headers['content-length'];\n        }\n        for (const name of Object.keys(this.headers || {})) {\n            const value = this.headers[name];\n            if (this.escapeHeaderValues &&\n                this.command !== 'CONNECT' &&\n                this.command !== 'CONNECTED') {\n                lines.push(`${name}:${FrameImpl.hdrValueEscape(`${value}`)}`);\n            }\n            else {\n                lines.push(`${name}:${value}`);\n            }\n        }\n        if (this.isBinaryBody ||\n            (!this.isBodyEmpty() && !this.skipContentLengthHeader)) {\n            lines.push(`content-length:${this.bodyLength()}`);\n        }\n        return lines.join(BYTE.LF) + BYTE.LF + BYTE.LF;\n    }\n    isBodyEmpty() {\n        return this.bodyLength() === 0;\n    }\n    bodyLength() {\n        const binaryBody = this.binaryBody;\n        return binaryBody ? binaryBody.length : 0;\n    }\n    /**\n     * Compute the size of a UTF-8 string by counting its number of bytes\n     * (and not the number of characters composing the string)\n     */\n    static sizeOfUTF8(s) {\n        return s ? new TextEncoder().encode(s).length : 0;\n    }\n    static toUnit8Array(cmdAndHeaders, binaryBody) {\n        const uint8CmdAndHeaders = new TextEncoder().encode(cmdAndHeaders);\n        const nullTerminator = new Uint8Array([0]);\n        const uint8Frame = new Uint8Array(uint8CmdAndHeaders.length + binaryBody.length + nullTerminator.length);\n        uint8Frame.set(uint8CmdAndHeaders);\n        uint8Frame.set(binaryBody, uint8CmdAndHeaders.length);\n        uint8Frame.set(nullTerminator, uint8CmdAndHeaders.length + binaryBody.length);\n        return uint8Frame;\n    }\n    /**\n     * Serialize a STOMP frame as per STOMP standards, suitable to be sent to the STOMP broker.\n     *\n     * @internal\n     */\n    static marshall(params) {\n        const frame = new FrameImpl(params);\n        return frame.serialize();\n    }\n    /**\n     *  Escape header values\n     */\n    static hdrValueEscape(str) {\n        return str\n            .replace(/\\\\/g, '\\\\\\\\')\n            .replace(/\\r/g, '\\\\r')\n            .replace(/\\n/g, '\\\\n')\n            .replace(/:/g, '\\\\c');\n    }\n    /**\n     * UnEscape header values\n     */\n    static hdrValueUnEscape(str) {\n        return str\n            .replace(/\\\\r/g, '\\r')\n            .replace(/\\\\n/g, '\\n')\n            .replace(/\\\\c/g, ':')\n            .replace(/\\\\\\\\/g, '\\\\');\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}